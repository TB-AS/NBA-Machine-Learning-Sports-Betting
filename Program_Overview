Certainly. I'll provide a brief description of each file and how they interconnect to create a holistic program. 

### 1. Primary Scripts:

- **main.py**:
  - **Description**: This is the primary entry point for the application. It parses command-line arguments, initiates data processing, model training, and predictions. Outputs the predictions and expected value for betting.
  - **Connection**: Calls functions or scripts from the `src` directory to fetch data, process data, and run models.

### 2. Data Processing (`src/Process-Data` directory):

- **Get_Data.py**:
  - **Description**: Fetches game data, including teams, scores, and dates.
  - **Connection**: Outputs data that can be used by other scripts for feature creation and model training.
  
- **Get_Odds_Data.py**:
  - **Description**: Fetches betting odds data.
  - **Connection**: Outputs odds data that can be used alongside game data to create a holistic dataset for training and predictions.
  
- **Add_Days_Rest.py**:
  - **Description**: Adds a feature indicating the number of rest days for teams between games.
  - **Connection**: Modifies the dataset fetched by `Get_Data.py` to include the days of rest feature.
  
- **Create_Games.py**:
  - **Description**: Processes the raw data to generate game-related features and prepares the dataset for training and predictions.
  - **Connection**: Uses data fetched by `Get_Data.py` and `Get_Odds_Data.py`, and outputs a dataset ready for model training.

### 3. Model Training (`src/Train-Models` directory):

- **XGBoost_Model_ML.py** and **XGBoost_Model_UO.py**:
  - **Description**: Train the XGBoost model for predicting game outcomes and under/overs respectively.
  - **Connection**: Uses the dataset generated by `Create_Games.py` and outputs trained models.
  
- **NN_Model_ML.py** and **NN_Model_UO.py**:
  - **Description**: Train neural network models for predicting game outcomes and under/overs respectively.
  - **Connection**: Uses the dataset generated by `Create_Games.py` and outputs trained models.
  
- **Logistic_Regression_ML.py** and **Logistic_Regression_UO.py**:
  - **Description**: Train logistic regression models for predicting game outcomes and under/overs respectively.
  - **Connection**: Uses the dataset generated by `Create_Games.py` and outputs trained models.

### 4. Utility Scripts (`src` directory):

- **Expected_Value.py**:
  - **Description**: Calculates the expected value of bets based on predictions and odds.
  - **Connection**: Used by `main.py` to provide insights into the potential value of bets.

- **Kelly_Criterion.py**:
  - **Description**: Calculates the recommended fraction of the bankroll to bet based on the model's edge.
  - **Connection**: Used by `main.py` to provide betting recommendations.

- **tools.py**:
  - **Description**: Contains utility functions, like fetching current date games and formatting outputs.
  - **Connection**: Used by multiple scripts for various utility purposes.

- **SbrOddsProvider.py**:
  - **Description**: Handles fetching of odds data from external sources.
  - **Connection**: Used by `Get_Odds_Data.py` to fetch betting odds.

### 5. Model Runners (`src` directory):

- **NN_Runner.py** and **XGBoost_Runner.py**:
  - **Description**: Contains methods to run predictions using the respective models.
  - **Connection**: Called by `main.py` to get model predictions based on user input.

### 6. Model Files:

- **XGBoost_68.9%_ML-3.json** and **XGBoost_54.8%_UO-8.json**:
  - **Description**: These are saved trained XGBoost models.
  - **Connection**: These models can be loaded by the runners to make predictions without retraining.

### 7. Neural Network Models:

- **keras_metadata.pb**, **saved_model.pb**, **variables.data-00000-of-00001**, and **variables.index**:
  - **Description**: These are components of saved neural network models trained using TensorFlow/Keras.
  - **Connection**: These can be loaded by the runners to make predictions using neural network models.

### 8. Databases:

- **dataset.sqlite** and **odds.sqlite**:
  - **Description**: Databases containing game data and betting odds respectively.
  - **Connection**: Used by data processing scripts to fetch required data.

### 9. Miscellaneous:

- **requirements.txt**:
  - **Description**: Lists the Python packages required to run the application.
  - **Connection**: Helps users set up the necessary environment to run the program.

### Holistic Overview:

The program begins with `main.py`, which calls various utilities and scripts based on user input. Data is fetched and processed in the `Process-Data` directory, then used to train models in the `Train-Models` directory. Once models are trained, predictions can be made and output to the user, along with betting insights using utility scripts.

I hope this provides a clear understanding of the structure and flow of the program. Let me know if you'd like more details on any specific component!
